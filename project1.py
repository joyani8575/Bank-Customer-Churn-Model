# -*- coding: utf-8 -*-
"""Project1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fCIuvOQKCcXNeklhmNIL1A9J355Kr9Kw

**Title**

Bank Customer Churn Model

**Objective**

Build a prediction model that will perform the following: Classify if a customer is going to churn or not.

**Data Source**

https://youtu.be/NnesVjywB8k?si=N8dbHLngw9FHghsP

**Import Library**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""**Import Data**"""

df = pd.read_csv('https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Bank%20Churn%20Modelling.csv')

"""**Describe Data**"""

df.head()

df.info()

"""**Data Preprocessing**"""

df.duplicated('CustomerId').sum()

df = df.set_index('CustomerId')

df.info()

df['Geography'].value_counts()

df.replace({'Geography':{'France':2,'Germany':1,'Spain':0}}, inplace = True)

df['Gender'].value_counts()

df.replace({'Gender': {'Male':0,'Female':1}}, inplace=True)

df['Num Of Products'].value_counts()

df.replace({'Num Of Products':{1:0,2:1,3:1,4:1}},inplace = True)

df['Has Credit Card'].value_counts()

df['Is Active Member'].value_counts()

"""**Data Visualization**"""

df.loc[(df['Balance']==0),'Churn'].value_counts()

df['Zero Balamce ']=np.where(df['Balance']>0,1,0)

df['Zero Balamce '].hist()

df.groupby(['Churn','Geography']).count()

"""**Define Target Variable (y) and Feature Variables(X)**"""

df.columns

x = df.drop(['Surname','Churn'],axis = 1)

y = df['Churn']

x.shape,y.shape

df['Churn'].value_counts()

import seaborn as sns
print(type(sns))
sns.countplot(x='Churn', data=df)

x.shape,y.shape

from imblearn.under_sampling import RandomUnderSampler

rus = RandomUnderSampler(random_state=222529)

x_rus,y_rus = rus.fit_resample(x,y)

x_rus.shape,y_rus.shape,x.shape,y.shape

y.value_counts()

y_rus.value_counts()

y_rus.plot(kind='hist')

from imblearn.over_sampling import RandomOverSampler

ros = RandomOverSampler(random_state = 222529)

x_ros , y_ros = ros.fit_resample(x,y)

x_ros.shape,y_ros.shape,x.shape,y.shape

y.value_counts()

y_ros.value_counts()

y_ros.plot(kind = 'hist')

"""**Train Test Split**"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train,y_test=train_test_split(x,y, test_size=0.3,random_state=222529)

x_train_rus, x_test_rus, y_train_rus,y_test_rus=train_test_split(x_rus,y_rus, test_size=0.3,random_state=222529)

x_train_ros, x_test_ros, y_train_ros,y_test_ros=train_test_split(x_rus,y_rus, test_size=0.3,random_state=222529)

"""**Modelling**"""

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()

x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']])

x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']])

x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])

x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])

x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])

x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])

"""**Model Evaluation**"""

from sklearn.svm import SVC

svc=SVC()

svc.fit(x_train, y_train)

y_pred=svc.predict(x_test)

from sklearn.metrics import confusion_matrix, classification_report

confusion_matrix(y_test, y_pred)

print(classification_report(y_test, y_pred))

svc_rus=SVC()

svc_rus.fit(x_train_rus, y_train_rus)

y_pred_rus=svc_rus.predict(x_test_rus)

confusion_matrix(y_test_rus, y_pred_rus)

print(classification_report(y_test_rus, y_pred_rus))

svc_ros=SVC()

svc_ros.fit(x_train_ros, y_train_ros)

"""**Prediction**"""

y_pred_ros=svc_ros.predict(x_test_ros)

confusion_matrix(y_test_ros,y_pred_ros)

print(classification_report(y_test_ros,y_pred_ros))

"""**Explaination**

Customer churn (or customer attrition) refers to the loss of customers or subscribers for any reason at all. Businesses measure and track churn as a percentage of lost customers compared to total number of customers over a given time period. This metric is usually tracked monthly and reported at the end of the month. It's important to note that churn rates vary by industry and knowing your market is key to reducing churn with more precision.

Customer churn prediction is the process of using machine learning models to identify customers who are likely to leave in the near future. ML algorithms analyze existing customer data, such as credit score and estimated salary, to identify patterns of customer behavior and make predictions about upcoming churn rates
"""